"""
author: Douglas Pan
last updated: 12/18/2018 

description:
   In order to better manage manual corrections across sites, 
   split/sort the file generated by REDCap by site

input:
    corrections.xlsx 
    additionalValues.xlsx (optional)
        Note: additionalValues should contain one OR more sheets
            - first sheet should include the excluded withdrawn information 
            - the subsequent sheets should follow this column structure:
                - id_redcap, redcap_Event_name, redcap_data_access_group, variable
                    (variable refers to the specific field that needs to be corrected)
                - values should either be blank or should need correcting

output:
    site_name_de_nda2.xlsx for all sites that require manual corrections
 
"""
 
import pandas as pd 
import numpy as np 
from collections import defaultdict

try: 
    df = pd.read_excel('corrections.xlsx', header=None)
except: 
    print("Error: corrections.xlsx file is not found")

flag = 0
try: 
    xls = pd.ExcelFile('additionalValues.xlsx')
    # remove participants that aren't enrolled 
    exclude_df = pd.read_excel(xls, sheet_name = xls.sheet_names[0])
    exclude_list = set(exclude_df.iloc[:,0])
    toDrop = []
    for i in range(0, df.shape[0], 3):
        id = df.loc[i,0]
        q = df.loc[i,1]
        if id in exclude_list:
            toDrop += range(i,i+3)
    df.drop(index=list(toDrop), inplace=True)
    df.reset_index(inplace=True, drop = True)
    flag = 1
except:
    pass

print("Reading in files....")
df["Corrected Values"] = ""
df["Initials"] = ""
df["Date"] = ""

# split by site/ids 
sites = defaultdict(list)
ids = defaultdict(list)
for i in range(0, df.shape[0], 3):
    sites[df.loc[i+2,0]].append(i)
    ids[df.loc[i,0]].append(i)

def insert_row(idx, df, df_insert):
    dfA = df.iloc[:idx, ]
    dfB = df.iloc[idx:, ]
    df = dfA.append(df_insert).append(dfB).reset_index(drop = True)
    return df


# add in weird/missing values from external sources 
if flag and len(xls.sheet_names) > 1:
    for i in range(1,len(xls.sheet_names)):
        adf = pd.read_excel(xls, sheet_name=xls.sheet_names[i])
        adf = adf.replace(np.nan, '', regex=True)
        for __, row in adf.iterrows():

            block = [[ row["id_redcap"], ""], [row["redcap_event_name"], adf.columns.values[-1] + "=" + str(row[adf.columns.values[-1]])], [row["redcap_data_access_group"]]]
            block = pd.DataFrame(block)
            block["Corrected Values"] = ""
            block["Initials"] = ""
            block["Date"] = ""
            
            if row["id_redcap"] in ids.keys():
                id_loc = ids[row["id_redcap"]][-1] + 3
                df = insert_row(id_loc, df, block)
            elif "(" + row["redcap_data_access_group"] + ")" in sites.keys():
                id_loc = sites["(" + row["redcap_data_access_group"] + ")"][-1] + 3
                df = insert_row(id_loc, df, block)

            for k, v in ids.items():
                new_vals = [x + 3 if x >= id_loc else x for x in v]
                ids[k] = new_vals

            new_val = ids[row["id_redcap"]] + [id_loc]
            new_val.sort()
            ids[row["id_redcap"]] = new_val

            for k, v in sites.items(): 
                new_vals = [x + 3 if x >= id_loc else x for x in v]
                sites[k] = new_vals

            new_val = sites["(" + row["redcap_data_access_group"] + ")"] + [id_loc]
            new_val.sort()
            sites["(" + row["redcap_data_access_group"] + ")"] = new_val

# write by site 
for k, v in sites.items():
    start = v[0] 
    end = v[-1] + 2 
    siteDf = df.loc[start:end, :]
    rowC = siteDf.shape[0]
    
    block = [[ "", "",]]
    block = pd.DataFrame(block)
    block["Corrected Values"] = ""
    block["Initials"] = ""
    block["Date"] = ""
    
    for i in range(3, rowC + int(rowC/3), 4):
        siteDf = insert_row(i, siteDf, block)

    fName = k[1:len(k)-1] + "_nda2.xlsx"
    writer = pd.ExcelWriter(fName, engine='xlsxwriter')
    siteDf.rename(index=str, columns={0: " ", 1: "  "}, inplace=True)
    siteDf.to_excel(writer, index=False)
    writer.save()
    writer.close()
    break
    